type: code
files:
- name: src/Main.java
  visible: true
  text: |-
    import java.util.Optional;

    public class Main {


        public static void main(String[] args) {

            // create an instance of Account here

            // pass it into process method
        }

        static class Account {

            private String code;
            private long balance;
            private User owner;

            public Account(String code, long balance, User owner) {
                this.code = code;
                this.balance = balance;
                this.owner = owner;
            }

            public String getCode() {
                return code;
            }

            public long getBalance() {
                return balance;
            }

            public User getOwner() {
                return owner;
            }
        }

        static class User {

            private String login;
            private String firstName;
            private String lastName;

            public User(String login, String firstName, String lastName) {
                this.login = login;
                this.firstName = firstName;
                this.lastName = lastName;
            }

            public String getLogin() {
                return login;
            }

            public String getFirstName() {
                return firstName;
            }

            public String getLastName() {
                return lastName;
            }
        }


        public static void process(Account account) {
            try {
                final Optional<User> owner = Optional.ofNullable(account.getOwner());

                System.out.println(account.getCode());
                System.out.println(account.getBalance());

                owner.ifPresent(o -> {
                    System.out.println(o.getLogin());
                    System.out.println(o.getFirstName());
                    System.out.println(o.getLastName());
                });

            } catch (Exception e) {
                System.out.println("Something wrong...");
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/2160#comment
status: Failed
feedback:
  message: |
    Compilation error
    Main.java:8: error: illegal start of expression
               public args() {
               ^
    Main.java:8: error: invalid method declaration; return type required
               public args() {
                      ^
    Main.java:9: error: ';' expected
                this.code = "123456",
                                    ^
    Main.java:10: error: ';' expected
                this.balance = 1000,
                                   ^
    Main.java:11: error: ')' expected
                this.owner = (User.login: "demo-user", firstName "Alexander", lastName: "Schmidt").
                                        ^
    Main.java:11: error: not a statement
                this.owner = (User.login: "demo-user", firstName "Alexander", lastName: "Schmidt").
                                                       ^
    Main.java:11: error: ';' expected
                this.owner = (User.login: "demo-user", firstName "Alexander", lastName: "Schmidt").
                                                                ^
    Main.java:11: error: not a statement
                this.owner = (User.login: "demo-user", firstName "Alexander", lastName: "Schmidt").
                                                                                        ^
    Main.java:11: error: ';' expected
                this.owner = (User.login: "demo-user", firstName "Alexander", lastName: "Schmidt").
                                                                                                 ^
    Main.java:70: error: class, interface, or enum expected
        public static void process(Account account) {
                      ^
    Main.java:72: error: class, interface, or enum expected
                final Optional<User> owner = Optional.ofNullable(account.getOwner());
                      ^
    Main.java:74: error: class, interface, or enum expected
                System.out.println(account.getCode());
                ^
    Main.java:75: error: class, interface, or enum expected
                System.out.println(account.getBalance());
                ^
    Main.java:77: error: class, interface, or enum expected
                owner.ifPresent(o -> {
                ^
    Main.java:79: error: class, interface, or enum expected
                    System.out.println(o.getFirstName());
                    ^
    Main.java:80: error: class, interface, or enum expected
                    System.out.println(o.getLastName());
                    ^
    Main.java:81: error: class, interface, or enum expected
                });
                ^
    Main.java:83: error: class, interface, or enum expected
            } catch (Exception e) {
            ^
    Main.java:85: error: class, interface, or enum expected
            }
            ^
    19 errors
  time: Wed, 30 Dec 2020 19:43:06 UTC
record: -1
